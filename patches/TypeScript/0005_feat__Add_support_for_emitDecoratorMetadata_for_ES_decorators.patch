diff --git a/src/compiler/factory/emitHelpers.ts b/src/compiler/factory/emitHelpers.ts
index 255518a28..1a2ef60e7 100644
--- a/src/compiler/factory/emitHelpers.ts
+++ b/src/compiler/factory/emitHelpers.ts
@@ -106,6 +106,7 @@ export interface EmitHelperFactory {
     createParamHelper(expression: Expression, parameterOffset: number): Expression;
     // ES Decorators Helpers
     createESDecorateHelper(ctor: Expression, descriptorIn: Expression, decorators: Expression, contextIn: ESDecorateContext, initializers: Expression, extraInitializers: Expression): Expression;
+    createESMetadataHelper(metadataKey: string, metadataValue: Expression): Expression;
     createRunInitializersHelper(thisArg: Expression, initializers: Expression, value?: Expression): Expression;
     // ES2018 Helpers
     createAssignHelper(attributesSegments: readonly Expression[]): Expression;
@@ -158,6 +159,7 @@ export function createEmitHelperFactory(context: TransformationContext): EmitHel
         createParamHelper,
         // ES Decorators Helpers
         createESDecorateHelper,
+        createESMetadataHelper,
         createRunInitializersHelper,
         // ES2018 Helpers
         createAssignHelper,
@@ -389,6 +391,18 @@ export function createEmitHelperFactory(context: TransformationContext): EmitHel
         );
     }
 
+    function createESMetadataHelper(metadataKey: string, metadataValue: Expression) {
+        context.requestEmitHelper(esMetadataHelper);
+        return factory.createCallExpression(
+            getUnscopedHelperName("__esMetadata"),
+            /*typeArguments*/ undefined,
+            [
+                factory.createStringLiteral(metadataKey),
+                metadataValue,
+            ],
+        );
+    }
+
     function createRunInitializersHelper(thisArg: Expression, initializers: Expression, value?: Expression) {
         context.requestEmitHelper(runInitializersHelper);
         return factory.createCallExpression(
@@ -799,6 +813,19 @@ const esDecorateHelper: UnscopedEmitHelper = {
         };`,
 };
 
+const esMetadataHelper: UnscopedEmitHelper = {
+    name: "typescript:esMetadata",
+    importName: "__esMetadata",
+    scoped: false,
+    priority: 3,
+    text: `
+            var __esMetadata = (this && this.__esMetadata) || function (k, v) {
+                return function (_, c) {
+                    c.metadata[k] = v;
+                }
+            };`,
+};
+
 const runInitializersHelper: UnscopedEmitHelper = {
     name: "typescript:runInitializers",
     importName: "__runInitializers",
diff --git a/src/compiler/program.ts b/src/compiler/program.ts
index 45d8539f5..c266d5cb6 100644
--- a/src/compiler/program.ts
+++ b/src/compiler/program.ts
@@ -4461,13 +4461,6 @@ export function createProgram(rootNamesOrOptions: readonly string[] | CreateProg
             }
         }
 
-        if (
-            options.emitDecoratorMetadata &&
-            !options.experimentalDecorators
-        ) {
-            createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, "emitDecoratorMetadata", "experimentalDecorators");
-        }
-
         if (options.jsxFactory) {
             if (options.reactNamespace) {
                 createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_with_option_1, "reactNamespace", "jsxFactory");
diff --git a/src/compiler/transformers/ts.ts b/src/compiler/transformers/ts.ts
index 75656cf5a..d90c30b82 100644
--- a/src/compiler/transformers/ts.ts
+++ b/src/compiler/transformers/ts.ts
@@ -203,11 +203,6 @@ import {
     VisitResult,
 } from "../_namespaces/ts.js";
 
-/**
- * Indicates whether to emit type metadata in the new format.
- */
-const USE_NEW_TYPE_METADATA_FORMAT = false;
-
 const enum TypeScriptSubstitutionFlags {
     None = 0,
     /** Enables substitutions for namespace exports. */
@@ -1109,11 +1104,9 @@ export function transformTypeScript(context: TransformationContext): Transformer
      * @param node The declaration node.
      */
     function getTypeMetadata(node: Declaration, container: ClassLikeDeclaration) {
-        // Decorator metadata is not yet supported for ES decorators.
-        if (!legacyDecorators) return undefined;
-        return USE_NEW_TYPE_METADATA_FORMAT ?
-            getNewTypeMetadata(node, container) :
-            getOldTypeMetadata(node, container);
+        return legacyDecorators ?
+            getOldTypeMetadata(node, container) :
+            getNewTypeMetadata(node, container);
     }
 
     function getOldTypeMetadata(node: Declaration, container: ClassLikeDeclaration) {
@@ -1151,7 +1144,7 @@ export function transformTypeScript(context: TransformationContext): Transformer
                 properties = append(properties, returnTypeProperty);
             }
             if (properties) {
-                const typeInfoMetadata = emitHelpers().createMetadataHelper("design:typeinfo", factory.createObjectLiteralExpression(properties, /*multiLine*/ true));
+                const typeInfoMetadata = emitHelpers().createESMetadataHelper("design:typeinfo", factory.createObjectLiteralExpression(properties, /*multiLine*/ true));
                 return [factory.createDecorator(typeInfoMetadata)];
             }
         }
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).errors.txt b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).errors.txt
deleted file mode 100644
index 34100c7c3..000000000
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).errors.txt
+++ /dev/null
@@ -1,51 +0,0 @@
-error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-
-
-!!! error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-==== esDecorators-emitDecoratorMetadata.ts (0 errors) ====
-    declare let dec: any;
-    
-    @dec
-    class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    }
-    
-    (@dec class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    });
\ No newline at end of file
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).js b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).js
index 4c997cd95..cd3bf9c02 100644
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).js
+++ b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2015).js
@@ -49,8 +49,53 @@ class C {
 });
 
 //// [esDecorators-emitDecoratorMetadata.js]
+var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
+    var useValue = arguments.length > 2;
+    for (var i = 0; i < initializers.length; i++) {
+        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
+    }
+    return useValue ? value : void 0;
+};
+var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
+    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
+    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
+    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
+    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
+    var _, done = false;
+    for (var i = decorators.length - 1; i >= 0; i--) {
+        var context = {};
+        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
+        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
+        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
+        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
+        if (kind === "accessor") {
+            if (result === void 0) continue;
+            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
+            if (_ = accept(result.get)) descriptor.get = _;
+            if (_ = accept(result.set)) descriptor.set = _;
+            if (_ = accept(result.init)) initializers.unshift(_);
+        }
+        else if (_ = accept(result)) {
+            if (kind === "field") initializers.unshift(_);
+            else descriptor[key] = _;
+        }
+    }
+    if (target) Object.defineProperty(target, contextIn.name, descriptor);
+    done = true;
+};
+var __esMetadata = (this && this.__esMetadata) || function (k, v) {
+    return function (_, c) {
+        c.metadata[k] = v;
+    }
+};
+var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
+    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
+    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
+};
 let C = (() => {
-    let _classDecorators = [dec];
+    let _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: () => [Number]
+        })];
     let _classDescriptor;
     let _classExtraInitializers = [];
     let _classThis;
@@ -79,12 +124,30 @@ let C = (() => {
     __setFunctionName(_classThis, "C");
     (() => {
         const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-        _method_decorators = [dec];
-        _set_x_decorators = [dec];
-        _y_decorators = [dec];
-        _static_method_decorators = [dec];
-        _static_set_x_decorators = [dec];
-        _static_y_decorators = [dec];
+        _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Function,
+                paramTypes: () => [Number],
+                returnType: () => void 0
+            })];
+        _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number,
+                paramTypes: () => [Number]
+            })];
+        _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number
+            })];
+        _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Function,
+                paramTypes: () => [Number],
+                returnType: () => void 0
+            })];
+        _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number,
+                paramTypes: () => [Number]
+            })];
+        _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number
+            })];
         __esDecorate(_classThis, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: obj => "x" in obj, set: (obj, value) => { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _instanceExtraInitializers);
@@ -103,7 +166,9 @@ let C = (() => {
     return C = _classThis;
 })();
 ((() => {
-    let _classDecorators = [dec];
+    let _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: () => [Number]
+        })];
     let _classDescriptor;
     let _classExtraInitializers = [];
     let _classThis;
@@ -132,12 +197,30 @@ let C = (() => {
     __setFunctionName(_classThis, "C");
     (() => {
         const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-        _method_decorators = [dec];
-        _set_x_decorators = [dec];
-        _y_decorators = [dec];
-        _static_method_decorators = [dec];
-        _static_set_x_decorators = [dec];
-        _static_y_decorators = [dec];
+        _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Function,
+                paramTypes: () => [Number],
+                returnType: () => void 0
+            })];
+        _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number,
+                paramTypes: () => [Number]
+            })];
+        _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number
+            })];
+        _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Function,
+                paramTypes: () => [Number],
+                returnType: () => void 0
+            })];
+        _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number,
+                paramTypes: () => [Number]
+            })];
+        _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: () => Number
+            })];
         __esDecorate(_classThis, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: obj => "x" in obj, set: (obj, value) => { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _instanceExtraInitializers);
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).errors.txt b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).errors.txt
deleted file mode 100644
index 34100c7c3..000000000
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).errors.txt
+++ /dev/null
@@ -1,51 +0,0 @@
-error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-
-
-!!! error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-==== esDecorators-emitDecoratorMetadata.ts (0 errors) ====
-    declare let dec: any;
-    
-    @dec
-    class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    }
-    
-    (@dec class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    });
\ No newline at end of file
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).js b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).js
index 3f6ed5f44..3382248f1 100644
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).js
+++ b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es2022).js
@@ -49,8 +49,49 @@ class C {
 });
 
 //// [esDecorators-emitDecoratorMetadata.js]
+var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
+    var useValue = arguments.length > 2;
+    for (var i = 0; i < initializers.length; i++) {
+        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
+    }
+    return useValue ? value : void 0;
+};
+var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
+    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
+    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
+    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
+    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
+    var _, done = false;
+    for (var i = decorators.length - 1; i >= 0; i--) {
+        var context = {};
+        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
+        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
+        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
+        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
+        if (kind === "accessor") {
+            if (result === void 0) continue;
+            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
+            if (_ = accept(result.get)) descriptor.get = _;
+            if (_ = accept(result.set)) descriptor.set = _;
+            if (_ = accept(result.init)) initializers.unshift(_);
+        }
+        else if (_ = accept(result)) {
+            if (kind === "field") initializers.unshift(_);
+            else descriptor[key] = _;
+        }
+    }
+    if (target) Object.defineProperty(target, contextIn.name, descriptor);
+    done = true;
+};
+var __esMetadata = (this && this.__esMetadata) || function (k, v) {
+    return function (_, c) {
+        c.metadata[k] = v;
+    }
+};
 let C = (() => {
-    let _classDecorators = [dec];
+    let _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: () => [Number]
+        })];
     let _classDescriptor;
     let _classExtraInitializers = [];
     let _classThis;
@@ -70,12 +111,30 @@ let C = (() => {
         static { _classThis = this; }
         static {
             const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-            _method_decorators = [dec];
-            _set_x_decorators = [dec];
-            _y_decorators = [dec];
-            _static_method_decorators = [dec];
-            _static_set_x_decorators = [dec];
-            _static_y_decorators = [dec];
+            _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Function,
+                    paramTypes: () => [Number],
+                    returnType: () => void 0
+                })];
+            _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number,
+                    paramTypes: () => [Number]
+                })];
+            _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number
+                })];
+            _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Function,
+                    paramTypes: () => [Number],
+                    returnType: () => void 0
+                })];
+            _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number,
+                    paramTypes: () => [Number]
+                })];
+            _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number
+                })];
             __esDecorate(this, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _staticExtraInitializers);
             __esDecorate(this, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: obj => "x" in obj, set: (obj, value) => { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
             __esDecorate(this, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _instanceExtraInitializers);
@@ -103,7 +162,9 @@ let C = (() => {
     return C = _classThis;
 })();
 ((() => {
-    let _classDecorators = [dec];
+    let _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: () => [Number]
+        })];
     let _classDescriptor;
     let _classExtraInitializers = [];
     let _classThis;
@@ -123,12 +184,30 @@ let C = (() => {
         static { _classThis = this; }
         static {
             const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-            _method_decorators = [dec];
-            _set_x_decorators = [dec];
-            _y_decorators = [dec];
-            _static_method_decorators = [dec];
-            _static_set_x_decorators = [dec];
-            _static_y_decorators = [dec];
+            _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Function,
+                    paramTypes: () => [Number],
+                    returnType: () => void 0
+                })];
+            _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number,
+                    paramTypes: () => [Number]
+                })];
+            _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number
+                })];
+            _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Function,
+                    paramTypes: () => [Number],
+                    returnType: () => void 0
+                })];
+            _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number,
+                    paramTypes: () => [Number]
+                })];
+            _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                    type: () => Number
+                })];
             __esDecorate(this, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _staticExtraInitializers);
             __esDecorate(this, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: obj => "x" in obj, set: (obj, value) => { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
             __esDecorate(this, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: obj => "method" in obj, get: obj => obj.method }, metadata: _metadata }, null, _instanceExtraInitializers);
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).errors.txt b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).errors.txt
deleted file mode 100644
index 34100c7c3..000000000
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).errors.txt
+++ /dev/null
@@ -1,51 +0,0 @@
-error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-
-
-!!! error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-==== esDecorators-emitDecoratorMetadata.ts (0 errors) ====
-    declare let dec: any;
-    
-    @dec
-    class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    }
-    
-    (@dec class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    });
\ No newline at end of file
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).js b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).js
index 37540d648..fdbe1eaa7 100644
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).js
+++ b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=es5).js
@@ -49,8 +49,53 @@ class C {
 });
 
 //// [esDecorators-emitDecoratorMetadata.js]
+var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
+    var useValue = arguments.length > 2;
+    for (var i = 0; i < initializers.length; i++) {
+        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
+    }
+    return useValue ? value : void 0;
+};
+var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
+    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
+    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
+    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
+    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
+    var _, done = false;
+    for (var i = decorators.length - 1; i >= 0; i--) {
+        var context = {};
+        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
+        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
+        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
+        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
+        if (kind === "accessor") {
+            if (result === void 0) continue;
+            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
+            if (_ = accept(result.get)) descriptor.get = _;
+            if (_ = accept(result.set)) descriptor.set = _;
+            if (_ = accept(result.init)) initializers.unshift(_);
+        }
+        else if (_ = accept(result)) {
+            if (kind === "field") initializers.unshift(_);
+            else descriptor[key] = _;
+        }
+    }
+    if (target) Object.defineProperty(target, contextIn.name, descriptor);
+    done = true;
+};
+var __esMetadata = (this && this.__esMetadata) || function (k, v) {
+    return function (_, c) {
+        c.metadata[k] = v;
+    }
+};
+var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
+    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
+    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
+};
 var C = function () {
-    var _classDecorators = [dec];
+    var _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: function () { return [Number]; }
+        })];
     var _classDescriptor;
     var _classExtraInitializers = [];
     var _classThis;
@@ -88,12 +133,30 @@ var C = function () {
     __setFunctionName(_classThis, "C");
     (function () {
         var _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-        _method_decorators = [dec];
-        _set_x_decorators = [dec];
-        _y_decorators = [dec];
-        _static_method_decorators = [dec];
-        _static_set_x_decorators = [dec];
-        _static_y_decorators = [dec];
+        _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Function; },
+                paramTypes: function () { return [Number]; },
+                returnType: function () { return void 0; }
+            })];
+        _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; },
+                paramTypes: function () { return [Number]; }
+            })];
+        _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; }
+            })];
+        _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Function; },
+                paramTypes: function () { return [Number]; },
+                returnType: function () { return void 0; }
+            })];
+        _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; },
+                paramTypes: function () { return [Number]; }
+            })];
+        _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; }
+            })];
         __esDecorate(_classThis, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: function (obj) { return "method" in obj; }, get: function (obj) { return obj.method; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: function (obj) { return "x" in obj; }, set: function (obj, value) { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: function (obj) { return "method" in obj; }, get: function (obj) { return obj.method; } }, metadata: _metadata }, null, _instanceExtraInitializers);
@@ -112,7 +175,9 @@ var C = function () {
     return C = _classThis;
 }();
 ((function () {
-    var _classDecorators = [dec];
+    var _classDecorators = [dec, __esMetadata("design:typeinfo", {
+            paramTypes: function () { return [Number]; }
+        })];
     var _classDescriptor;
     var _classExtraInitializers = [];
     var _classThis;
@@ -150,12 +215,30 @@ var C = function () {
     __setFunctionName(_classThis, "C");
     (function () {
         var _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-        _method_decorators = [dec];
-        _set_x_decorators = [dec];
-        _y_decorators = [dec];
-        _static_method_decorators = [dec];
-        _static_set_x_decorators = [dec];
-        _static_y_decorators = [dec];
+        _method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Function; },
+                paramTypes: function () { return [Number]; },
+                returnType: function () { return void 0; }
+            })];
+        _set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; },
+                paramTypes: function () { return [Number]; }
+            })];
+        _y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; }
+            })];
+        _static_method_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Function; },
+                paramTypes: function () { return [Number]; },
+                returnType: function () { return void 0; }
+            })];
+        _static_set_x_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; },
+                paramTypes: function () { return [Number]; }
+            })];
+        _static_y_decorators = [dec, __esMetadata("design:typeinfo", {
+                type: function () { return Number; }
+            })];
         __esDecorate(_classThis, null, _static_method_decorators, { kind: "method", name: "method", static: true, private: false, access: { has: function (obj) { return "method" in obj; }, get: function (obj) { return obj.method; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _static_set_x_decorators, { kind: "setter", name: "x", static: true, private: false, access: { has: function (obj) { return "x" in obj; }, set: function (obj, value) { obj.x = value; } }, metadata: _metadata }, null, _staticExtraInitializers);
         __esDecorate(_classThis, null, _method_decorators, { kind: "method", name: "method", static: false, private: false, access: { has: function (obj) { return "method" in obj; }, get: function (obj) { return obj.method; } }, metadata: _metadata }, null, _instanceExtraInitializers);
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).errors.txt b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).errors.txt
deleted file mode 100644
index 34100c7c3..000000000
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).errors.txt
+++ /dev/null
@@ -1,51 +0,0 @@
-error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-
-
-!!! error TS5052: Option 'emitDecoratorMetadata' cannot be specified without specifying option 'experimentalDecorators'.
-==== esDecorators-emitDecoratorMetadata.ts (0 errors) ====
-    declare let dec: any;
-    
-    @dec
-    class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    }
-    
-    (@dec class C {
-        constructor(x: number) {}
-    
-        @dec
-        method(x: number) {}
-    
-        @dec
-        set x(x: number) {}
-    
-        @dec
-        y: number;
-    
-        @dec
-        static method(x: number) {}
-    
-        @dec
-        static set x(x: number) {}
-    
-        @dec
-        static y: number;
-    });
\ No newline at end of file
diff --git a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).js b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).js
index 06fe3d446..552c6f919 100644
--- a/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).js
+++ b/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).js
@@ -49,36 +49,95 @@ class C {
 });
 
 //// [esDecorators-emitDecoratorMetadata.js]
+var __esMetadata = (this && this.__esMetadata) || function (k, v) {
+    return function (_, c) {
+        c.metadata[k] = v;
+    }
+};
 @dec
+@__esMetadata("design:typeinfo", {
+    paramTypes: () => [Number]
+})
 class C {
     constructor(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Function,
+        paramTypes: () => [Number],
+        returnType: () => void 0
+    })
     method(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number,
+        paramTypes: () => [Number]
+    })
     set x(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number
+    })
     y;
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Function,
+        paramTypes: () => [Number],
+        returnType: () => void 0
+    })
     static method(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number,
+        paramTypes: () => [Number]
+    })
     static set x(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number
+    })
     static y;
 }
 (
 @dec
+@__esMetadata("design:typeinfo", {
+    paramTypes: () => [Number]
+})
 class C {
     constructor(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Function,
+        paramTypes: () => [Number],
+        returnType: () => void 0
+    })
     method(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number,
+        paramTypes: () => [Number]
+    })
     set x(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number
+    })
     y;
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Function,
+        paramTypes: () => [Number],
+        returnType: () => void 0
+    })
     static method(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number,
+        paramTypes: () => [Number]
+    })
     static set x(x) { }
     @dec
+    @__esMetadata("design:typeinfo", {
+        type: () => Number
+    })
     static y;
 });
diff --git a/tests/cases/conformance/esDecorators/esDecorators-emitDecoratorMetadata.ts b/tests/cases/conformance/esDecorators/esDecorators-emitDecoratorMetadata.ts
index 90178600c..1d77ef169 100644
--- a/tests/cases/conformance/esDecorators/esDecorators-emitDecoratorMetadata.ts
+++ b/tests/cases/conformance/esDecorators/esDecorators-emitDecoratorMetadata.ts
@@ -1,5 +1,4 @@
 // @target: esnext, es2022, es2015, es5
-// @noEmitHelpers: true
 // @emitDecoratorMetadata: true
 // @noTypesAndSymbols: true
 
